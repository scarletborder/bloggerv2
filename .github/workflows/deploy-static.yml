name: Deploy Static Assets

on:
  push:
    branches:
      - release

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # 获取完整历史，确保能访问所有分支

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Find built assets and generate report
        id: generate-report
        run: |
          # 定义 CDN 基础路径
          CDN_BASE="https://cdn.jsdelivr.net/gh/scarletborder/bloggerv2@static/"

          # 查找带有 hash 的 JS 文件 (例如: index-xxxxxxxx.js)
          JS_FILE=$(find dist/assets -name "index-*.js" | head -n 1)
          # 提取文件名，例如 index-xxxxxxxx.js
          JS_FILENAME=$(basename "$JS_FILE")
          # 构造完整的 JS CDN URL
          JS_CDN_URL="${CDN_BASE}assets/${JS_FILENAME}"

          # 查找带有 hash 的 CSS 文件 (例如: index-xxxxxxxx.css)
          CSS_FILE=$(find dist/assets -name "index-*.css" | head -n 1)
          # 提取文件名，例如 index-xxxxxxxx.css
          CSS_FILENAME=$(basename "$CSS_FILE")
          # 构造完整的 CSS CDN URL
          CSS_CDN_URL="${CDN_BASE}assets/${CSS_FILENAME}"

          # 生成报告内容
          REPORT_CONTENT="<script crossorigin='anonymous' src='${JS_CDN_URL}' type='module'></script>\n"
          REPORT_CONTENT+="<link crossorigin='anonymous' href='${CSS_CDN_URL}' rel='stylesheet'/>"

          # 将报告内容写入文件
          echo -e "$REPORT_CONTENT" > build_report.txt

          # 将报告内容作为工作流输出 (可选，方便其他步骤或工作流使用) [5, 7, 8, 10]
          echo "report_content=$(echo -e "$REPORT_CONTENT" | sed 's/"/\\"/g' | sed ':a;N;s/\n/\\n/g;ba')" >> $GITHUB_OUTPUT
          echo "js_cdn_url=${JS_CDN_URL}" >> $GITHUB_OUTPUT
          echo "css_cdn_url=${CSS_CDN_URL}" >> $GITHUB_OUTPUT

      - name: Upload Build Report as Artifact
        uses: actions/upload-artifact@v4 # 使用 v4 版本上传 Artifact [1, 4, 6, 11]
        with:
          name: build-report
          path: build_report.txt
          retention-days: 7 # 保留 Artifact 7 天

      - name: Check if static branch exists
        id: check-branch
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/static; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create static branch if not exists
        if: steps.check-branch.outputs.branch_exists == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout --orphan static
          git reset --hard
          git commit --allow-empty -m "Initial commit for static branch"
          git push origin static

      - name: Deploy to static branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: static
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy static assets from release branch'