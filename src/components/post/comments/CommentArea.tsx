import React, { useRef, useState } from 'react';
import { useInfiniteScroll, useLatest, useUpdateEffect } from 'ahooks';
import { isMobile } from 'react-device-detect';
import { GetPostLegacyComments } from '../../../services/LegacyComment';
import { getCurrentTheme } from '../../../constants/colors';
import { CommentItemComponent } from './CommentItem';
import { Seperator } from '../common';

type CommentAreaProps = {
  postId: string;
}

export default function CommentArea({ postId }: CommentAreaProps) {
  const colors = getCurrentTheme();
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const [totalComments, setTotalComments] = useState<number>(0);

  // ‰ΩøÁî®useLatestÁ°Æ‰øùÂú®ÂºÇÊ≠•ÂõûË∞É‰∏≠Ëé∑ÂèñÊúÄÊñ∞ÂÄº
  const latestPostId = useLatest(postId);

  // ËØÑËÆ∫ÁöÑÊó†ÈôêÊªöÂä®
  const {
    data: commentsData,
    loading: commentsLoading,
    loadMore: _commentsLoadMore,
    loadingMore: commentsLoadingMore,
    noMore: commentsNoMore,
    reload: commentsReload,
  } = useInfiniteScroll(
    async (d) => {
      if (!latestPostId.current) {
        return { list: [], noMore: true };
      }

      const startIndex = d?.list ? d.list.length : 0;
      const result = await GetPostLegacyComments({
        postId: latestPostId.current,
        startIndex,
        pageSize: 10,
      });

      // ‰ªÖÂú®È¶ñÊ¨°Âä†ËΩΩÊó∂Êõ¥Êñ∞ÊÄªËØÑËÆ∫Êï∞
      if (startIndex === 0) {
        setTotalComments(result.total);
      }

      const currentTotal = (d?.list?.length || 0) + result.items.length;

      return {
        list: result.items,
        // Ê†πÊçÆAPIËøîÂõûÁöÑÊÄªÊï∞Âà§Êñ≠ÊòØÂê¶ËøòÊúâÊõ¥Â§ö
        noMore: currentTotal >= result.total,
      };
    },
    {
      // Âú®ÁßªÂä®Á´ØÔºåÊªöÂä®ÁõÆÊ†áÊòØÊï¥‰∏™È°µÈù¢(undefined)ÔºåÂú®Ê°åÈù¢Á´ØÊòØÊåáÂÆöÁöÑdiv
      target: isMobile ? undefined : scrollContainerRef,
      isNoMore: (d) => d?.noMore === true,
      // ÁßªÈô§‰∫Ü manual: true ‰ª•ÂêØÁî®Ëá™Âä®Âä†ËΩΩ
      threshold: 100,
    }
  );

  // ÂΩì postId ÊîπÂèòÊó∂ÈáçÊñ∞Âä†ËΩΩËØÑËÆ∫
  useUpdateEffect(() => {
    if (postId) {
      setTotalComments(0);
      commentsReload();
    }
  }, [postId]);

  const containerStyles: React.CSSProperties = {
    marginTop: '32px',
    padding: isMobile ? '0px' : '24px',
    backgroundColor: colors.background,
    borderRadius: isMobile ? '0' : '16px',
    border: isMobile ? 'none' : `1px solid ${colors.border}`,
  };

  const titleStyles: React.CSSProperties = {
    fontSize: isMobile ? '20px' : '24px',
    fontWeight: 'bold',
    color: colors.text,
    marginBottom: '20px',
    display: 'flex',
    alignItems: 'center',
    gap: '8px',
  };

  const countStyles: React.CSSProperties = {
    fontSize: '16px',
    fontWeight: 'normal',
    color: colors.textSecondary,
  };

  const scrollAreaStyles: React.CSSProperties = {
    maxHeight: isMobile ? 'none' : '600px',
    overflowY: isMobile ? 'visible' : 'auto',
    paddingRight: isMobile ? '0' : '8px',
  };

  const loadingStyles: React.CSSProperties = {
    textAlign: 'center',
    padding: '20px',
    color: colors.textSecondary,
    fontSize: '14px',
  };

  const emptyStyles: React.CSSProperties = {
    textAlign: 'center',
    padding: '40px 20px',
    color: colors.textSecondary,
    fontSize: '16px',
  };

  const loadMoreStyles: React.CSSProperties = {
    textAlign: 'center',
    padding: '16px',
    color: colors.textSecondary,
    fontSize: '14px',
  };


  if (commentsLoading && !commentsData?.list?.length) {
    return (
      <div style={containerStyles}>
        {isMobile && <Seperator />}
        <h3 style={titleStyles}>
          üí¨ ËØÑËÆ∫Âå∫
        </h3>
        <div style={loadingStyles}>
          Ê≠£Âú®Âä†ËΩΩËØÑËÆ∫...
        </div>
      </div>
    );
  }

  const commentsList = commentsData?.list || [];

  return (
    <div style={containerStyles}>
      {isMobile && <Seperator />}
      <h3 style={titleStyles}>
        üí¨ ËØÑËÆ∫Âå∫
        {totalComments > 0 && (
          <span style={countStyles}>({totalComments} Êù°ËØÑËÆ∫)</span>
        )}
      </h3>

      {commentsList.length === 0 && !commentsLoading ? (
        <div style={emptyStyles}>
          ÊöÇÊó†ËØÑËÆ∫ÔºåÂø´Êù•Êä¢Ê≤ôÂèëÂêßÔºÅ
        </div>
      ) : (
        <div ref={scrollContainerRef} style={scrollAreaStyles}>
          {commentsList.map((comment, index) => (
            <CommentItemComponent key={`${comment.timeStamp}-${index}`} comment={comment} />
          ))}

          {commentsLoadingMore && (
            <div style={loadMoreStyles}>
              Ê≠£Âú®Âä†ËΩΩÊõ¥Â§öËØÑËÆ∫...
            </div>
          )}

          {commentsNoMore && commentsList.length > 0 && (
            <div style={loadMoreStyles}>
              Â∑≤ÊòæÁ§∫ÂÖ®ÈÉ®ËØÑËÆ∫
            </div>
          )}
        </div>
      )}
    </div>
  );
}